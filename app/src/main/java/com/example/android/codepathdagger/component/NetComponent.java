package com.example.android.codepathdagger.component;


import com.example.android.codepathdagger.MainActivity;
import com.example.android.codepathdagger.module.AppModule;
import com.example.android.codepathdagger.module.NetModule;

import javax.inject.Singleton;

import dagger.Component;
import okhttp3.OkHttpClient;

// The connection between the provider of dependencies, @Module,
// and the classes requesting them through @Inject is made using @Component
// Dagger will generate class Dagger<ComponentName>, which will be the injector class
// It assigns references in our activities, services, or fragments to have access to singletons we earlier defined

/** The Injector class
 * Actual implementation is generated by Dagger2 */
@Singleton
@Component(modules={AppModule.class, NetModule.class}) // specify the modules this component has
/* "Hey,this component needs to work with these modules to know ho to construct the object I need" */
public interface NetComponent {
    // The activities, services, or fragments that can be added
    // should be declared in this class with individual inject() methods:

    // List all the places where you will use/inject this object
    void inject(MainActivity activity);
    // void inject(MyFragment fragment);
    // void inject(MyService service);

}
